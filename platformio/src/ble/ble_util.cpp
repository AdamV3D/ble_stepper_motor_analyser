#include "ble_util.h"

namespace ble_util {

#define ARRAY_SIZE(x) sizeof(x) / sizeof(x[0])

#define ENTRY(x) \
  { x, #x }

struct TableEntry {
  // For verification. Should match the entry's index.
  int value;
  const char* name;
};

// Names of esp_gatts_cb_event_t
static const TableEntry gatts_events_table[] = {
    ENTRY(ESP_GATTS_REG_EVT),
    ENTRY(ESP_GATTS_READ_EVT),
    ENTRY(ESP_GATTS_WRITE_EVT),
    ENTRY(ESP_GATTS_EXEC_WRITE_EVT),
    ENTRY(ESP_GATTS_MTU_EVT),
    ENTRY(ESP_GATTS_CONF_EVT),
    ENTRY(ESP_GATTS_UNREG_EVT),
    ENTRY(ESP_GATTS_CREATE_EVT),
    ENTRY(ESP_GATTS_ADD_INCL_SRVC_EVT),
    ENTRY(ESP_GATTS_ADD_CHAR_EVT),
    ENTRY(ESP_GATTS_ADD_CHAR_DESCR_EVT),
    ENTRY(ESP_GATTS_DELETE_EVT),
    ENTRY(ESP_GATTS_START_EVT),
    ENTRY(ESP_GATTS_STOP_EVT),
    ENTRY(ESP_GATTS_CONNECT_EVT),
    ENTRY(ESP_GATTS_DISCONNECT_EVT),
    ENTRY(ESP_GATTS_OPEN_EVT),
    ENTRY(ESP_GATTS_CANCEL_OPEN_EVT),
    ENTRY(ESP_GATTS_CLOSE_EVT),
    ENTRY(ESP_GATTS_LISTEN_EVT),
    ENTRY(ESP_GATTS_CONGEST_EVT),
    ENTRY(ESP_GATTS_RESPONSE_EVT),
    ENTRY(ESP_GATTS_CREAT_ATTR_TAB_EVT),
    ENTRY(ESP_GATTS_SET_ATTR_VAL_EVT),
    ENTRY(ESP_GATTS_SEND_SERVICE_CHANGE_EVT),
};

// Names of esp_gap_ble_cb_event_t.
static const TableEntry gap_ble_events_table[] = {
    ENTRY(ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_RSP_DATA_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_PARAM_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_RESULT_EVT),
    ENTRY(ESP_GAP_BLE_ADV_DATA_RAW_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_RSP_DATA_RAW_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_ADV_START_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_START_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_AUTH_CMPL_EVT),
    ENTRY(ESP_GAP_BLE_KEY_EVT),
    ENTRY(ESP_GAP_BLE_SEC_REQ_EVT),
    ENTRY(ESP_GAP_BLE_PASSKEY_NOTIF_EVT),
    ENTRY(ESP_GAP_BLE_PASSKEY_REQ_EVT),
    ENTRY(ESP_GAP_BLE_OOB_REQ_EVT),
    ENTRY(ESP_GAP_BLE_LOCAL_IR_EVT),
    ENTRY(ESP_GAP_BLE_LOCAL_ER_EVT),
    ENTRY(ESP_GAP_BLE_NC_REQ_EVT),
    ENTRY(ESP_GAP_BLE_ADV_STOP_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_STOP_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_STATIC_RAND_ADDR_EVT),
    ENTRY(ESP_GAP_BLE_UPDATE_CONN_PARAMS_EVT),
    ENTRY(ESP_GAP_BLE_SET_PKT_LENGTH_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_LOCAL_PRIVACY_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_REMOVE_BOND_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_CLEAR_BOND_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_GET_BOND_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_READ_RSSI_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_UPDATE_WHITELIST_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_UPDATE_DUPLICATE_EXCEPTIONAL_LIST_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_CHANNELS_EVT),
    ENTRY(ESP_GAP_BLE_READ_PHY_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_PREFERED_DEFAULT_PHY_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_PREFERED_PHY_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_SET_RAND_ADDR_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_SET_PARAMS_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_DATA_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_SCAN_RSP_DATA_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_START_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_STOP_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_SET_REMOVE_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_SET_CLEAR_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_SET_PARAMS_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_DATA_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_START_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_STOP_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_CREATE_SYNC_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_SYNC_CANCEL_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_SYNC_TERMINATE_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_ADD_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_REMOVE_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_CLEAR_DEV_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_SET_EXT_SCAN_PARAMS_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_SCAN_START_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_SCAN_STOP_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PREFER_EXT_CONN_PARAMS_SET_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_PHY_UPDATE_COMPLETE_EVT),
    ENTRY(ESP_GAP_BLE_EXT_ADV_REPORT_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_TIMEOUT_EVT),
    ENTRY(ESP_GAP_BLE_ADV_TERMINATED_EVT),
    ENTRY(ESP_GAP_BLE_SCAN_REQ_RECEIVED_EVT),
    ENTRY(ESP_GAP_BLE_CHANNEL_SELETE_ALGORITHM_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_REPORT_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_SYNC_LOST_EVT),
    ENTRY(ESP_GAP_BLE_PERIODIC_ADV_SYNC_ESTAB_EVT),
    ENTRY(ESP_GAP_BLE_EVT_MAX),
};

// Common function to lookup a name table.
static const char* find_name(int value, const TableEntry* table,
                             int table_size) {
  if (value < 0 && value >= table_size) {
    return "(invalid)";
  }
  // Sanity check.
  assert(table[value].value == value);
  return table[value].name;
}

const char* gatts_event_name(esp_gatts_cb_event_t event) {
  return find_name(event, gatts_events_table, ARRAY_SIZE(gatts_events_table));
}

const char* gap_ble_event_name(esp_gap_ble_cb_event_t event) {
  return find_name(event, gap_ble_events_table,
                   ARRAY_SIZE(gap_ble_events_table));
}

static void test(const TableEntry* table, int table_size) {
  for (int i = 0; i < table_size; i++) {
    assert(table[i].value == i);
  }
}
void test_tables() {
  test(gatts_events_table, ARRAY_SIZE(gatts_events_table));
  test(gap_ble_events_table, ARRAY_SIZE(gap_ble_events_table));
}

}  // namespace ble_util